//----------------------------------------------
//  flex-grid();
//  Creates grid blocks via flexbox

//  @param: $xsm, $sm, $med, $lg, $xl - @media sizes
//  @param: $pad - item padding
//  @useage: @include flex-grid(1, 2, 3, 4, 1%);

//  @note: Can replace universal selector with '& > #{$item}''  ($item:'article')
//----------------------------------------------
@mixin flex-grid(
  $xs:null,
  $sm:null,
  $med:null,
  $lg:null,
  $xl:null,
  $xxl:null,
  $pad-vert:0,
  $pad-horz:0,
  $align:null) {
    display: flex;
    flex-direction: row;
    flex-flow: wrap;
    @if $align {
      align-items: $align;
    }
    margin-left: -$pad-horz;
    margin-right: -$pad-horz;

  & > * {
    padding-top:$pad-vert;
    padding-bottom:$pad-vert;
    padding-left:$pad-horz;
    padding-right:$pad-horz;
    flex-basis: 100%/$xs;
    max-width: 100%/$xs;

    @if $sm {
      @media(min-width: $mq-sm){
        flex-basis: 100%/$sm;
        max-width: 100%/$sm;
      }
    }

    @if $med {
      @media(min-width: $mq-med){
        flex-basis: 100%/$med;
        max-width: 100%/$med;
      }
    }

    @if $lg {
      @media(min-width: $mq-lg){
        flex-basis: 100%/$lg;
        max-width: 100%/$lg;
      }
    }

    @if $xl {
      @media(min-width: $mq-xl){
        flex-basis: 100%/$xl;
        max-width: 100%/$xl;
      }
    }

    @if $xxl {
      @media(min-width: $mq-xxl){
        flex-basis: 100%/$xxl;
        max-width: 100%/$xxl;
      }
    }
  }
  &.is-center{
    justify-content: center;
  }
}

//----------------------------------------------
//  Flex Row
//  A helper to create flex rows
//
//  @param align - vert alignment
//  @param $justify - horx positioning
//  @param $wrap - wrap / no-wrap
//  @mobile $mobile (boolean) - start row on mobile
//----------------------------------------------
@mixin flex-row(
  $align: null,
  $justify:null,
  $direction: null,
  $wrap: wrap,
  $col-pad:null,
  $mobile:false){
  @if $align {
    align-items: $align;
  }
  @if $justify {
    justify-content: $justify;
  }
  @if $direction {
    flex-direction: $direction;
  }
  @if $mobile == true {
    display: flex;
    flex-wrap: wrap;

  } @else {

    @media (min-width: $mq-med){
      display: flex;
      flex-wrap: $wrap;
    }
  }
  @if $col-pad {
    @media (min-width: $mq-med) {
      margin-left: -$col-pad;
      margin-right: -$col-pad;
    }
    & > * {
      @media (min-width: $mq-med) {
        padding-left: $col-pad;
        padding-right: $col-pad
      }
    }
  }

  @if $mobile == true and $col-pad{
    margin-left: -$col-pad;
    margin-right: -$col-pad;

    & > * {
      padding-left: $col-pad;
      padding-right: $col-pad
    }
  }
}


//----------------------------------------------
//  Flex Column
//  A helper to output cross browser requirements for
//  columns inside a flexbox parent. flex-basis isn't
//  enough in all cases.
//
//  @param $width (size), $mobile (boolean)
//----------------------------------------------
@mixin flex-col(
$smallest:null,
$sm:null,
$med:null,
$lg:null){
  flex-basis: $smallest;
  width: $smallest;
  max-width: $smallest;

  @if $sm  {
    @media (min-width: $mq-sm){
      flex-basis: $sm;
      width: $sm;
      max-width: $sm;
    }
  }

  @if $med {
    @media (min-width: $mq-med){
      flex-basis: $med;
      width: $med;
      max-width: $med;
    }
  }

  @if $lg {
    @media (min-width: $mq-lg) {
        flex-basis: $lg;
        width: $lg;
        max-width: $lg;
    }
  }
}

//----------------------------------------------
//  flex-order()
//  A helper to change an elements order at various
//  breaks, via flex.
//
//  @param $sm, $med, $lg, $xl (breaks)
//----------------------------------------------
@mixin flex-order($sm:null, $med: null, $lg: null, $xl:null){
  order: $sm;

  @if $med {
    @media (min-width: $mq-med) {
      order: $med;
    }
  }

  @if $lg {
    @media (min-width: $mq-lg) {
      order: $lg;
    }
  }

  @if $xl {
    @media (min-width: $mq-xl) {
      order: $xl;
    }
  }
}
